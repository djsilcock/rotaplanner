// This file is auto-generated by @hey-api/openapi-ts

export type ActivitiesByDateResponse = {
    date: string;
    activities: Array<ActivityResponse>;
};

export type ActivityResponse = {
    id: string;
    name: string;
    start_time: number;
    finish_time: number;
    location: Location | null;
    staff_assignments: Array<StaffAssignmentResponse>;
};

export type ActivityTemplateListItem = {
    id: string;
    name: string;
};

export type ActivityTemplateResponseInput = {
    id: string;
    name: string;
    activity_tags: Array<string>;
    requirements: RequirementGroupInput;
    location: string;
    start_time: string;
    finish_time: string;
    recurrence_rules: RuleGroupInput;
};

export type ActivityTemplateResponseOutput = {
    id: string;
    name: string;
    activity_tags: Array<string>;
    requirements: RequirementGroupOutput;
    location: string;
    start_time: string;
    finish_time: string;
    recurrence_rules: RuleGroupOutput;
};

export type DailyRule = {
    start_date: string;
    finish_date: string | null;
    anchor_date: string | null;
    rule_type?: 'daily';
    cycle_length: number;
};

export type DateRange = {
    start: string;
    finish: string;
};

export type DateTag = {
    id: string;
    name: string;
};

export type DateTagRule = {
    start_date: string;
    finish_date: string | null;
    anchor_date: string | null;
    rule_type?: 'date-tag';
    type: DateType;
    tag: DateTag;
};

export type DateType = 'incl' | 'excl';

export type DayInMonthRule = {
    start_date: string;
    finish_date: string | null;
    anchor_date: string | null;
    rule_type?: 'day-in-month';
    months: Array<number>;
    days: Array<number>;
};

/**
 * group types
 */
export type GroupType = 'and' | 'or' | 'not';

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type LabelledUuid = {
    id: string;
    name: string;
};

export type Location = {
    id: string;
    name: string;
};

export type MoveActivityInLocationGrid = {
    activity_id: string;
    original_date: string;
    new_date: string;
    original_location: string | null;
    new_location: string | null;
};

export type MoveActivityInStaffGrid = {
    activity_id: string;
    original_date: string;
    new_date: string;
    original_staff: string | null;
    new_staff: string | null;
};

export type ReallocateActivityErrorResponse = {
    status?: 'error';
    error: string;
    data: Array<ActivitiesByDateResponse>;
};

export type ReallocateActivityOkResponse = {
    status?: 'ok';
    data: Array<ActivitiesByDateResponse>;
};

export type ReallocateStaffToActivity = {
    original_activity_id: string;
    new_activity_id: string | null;
    staff: string;
};

export type Requirement = {
    rule_or_group?: 'rule';
    mandatory?: number;
    optional?: number;
    skills: Array<Skill>;
};

export type RequirementGroupInput = {
    rule_or_group?: 'group';
    group_type: RequirementType;
    requirements: Array<({
        rule_or_group?: 'rule';
    } & Requirement) | ({
        rule_or_group?: 'group';
    } & RequirementGroupInput)>;
};

export type RequirementGroupOutput = {
    rule_or_group?: 'group';
    group_type: RequirementType;
    requirements: Array<({
        rule_or_group?: 'rule';
    } & Requirement) | ({
        rule_or_group?: 'group';
    } & RequirementGroupOutput)>;
};

export type RequirementType = 'AND' | 'OR';

export type RotaConfig = {
    date_range: DateRange;
    y_axis: Array<LabelledUuid>;
};

export type RuleGroupInput = {
    group_type: GroupType;
    groups: Array<RuleGroupInput>;
    rules: Array<({
        rule_type?: 'daily';
    } & DailyRule) | ({
        rule_type?: 'weekly';
    } & WeeklyRule) | ({
        rule_type?: 'day-in-month';
    } & DayInMonthRule) | ({
        rule_type?: 'week-in-month';
    } & WeekInMonthRule) | ({
        rule_type?: 'date-tag';
    } & DateTagRule)>;
};

export type RuleGroupOutput = {
    group_type: GroupType;
    groups: Array<RuleGroupOutput>;
    rules: Array<({
        rule_type?: 'daily';
    } & DailyRule) | ({
        rule_type?: 'weekly';
    } & WeeklyRule) | ({
        rule_type?: 'day-in-month';
    } & DayInMonthRule) | ({
        rule_type?: 'week-in-month';
    } & WeekInMonthRule) | ({
        rule_type?: 'date-tag';
    } & DateTagRule)>;
};

export type Skill = {
    id: string;
    name: string;
};

export type StaffAssignmentResponse = {
    staff: StaffResponse;
};

export type StaffResponse = {
    id: string;
    name: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type WeekInMonthRule = {
    start_date: string;
    finish_date: string | null;
    anchor_date: string | null;
    rule_type?: 'week-in-month';
    weekdays: Array<number>;
    week_numbers: Array<number>;
    months: Array<number>;
};

export type WeeklyRule = {
    start_date: string;
    finish_date: string | null;
    anchor_date: string | null;
    rule_type?: 'weekly';
    cycle_length: number;
    weekdays: Array<number>;
    week_numbers: Array<number>;
};

export type ActivitiesByDateData = {
    body?: never;
    path?: never;
    query?: {
        start_date?: string | null;
        finish_date?: string | null;
        date?: Array<string> | null;
        include_all?: boolean;
    };
    url: '/api/activities/by_date';
};

export type ActivitiesByDateErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ActivitiesByDateError = ActivitiesByDateErrors[keyof ActivitiesByDateErrors];

export type ActivitiesByDateResponses = {
    /**
     * Successful Response
     */
    200: Array<ActivitiesByDateResponse>;
};

export type ActivitiesByDateResponse2 = ActivitiesByDateResponses[keyof ActivitiesByDateResponses];

export type MoveActivityInStaffGridData = {
    body: MoveActivityInStaffGrid;
    path?: never;
    query?: never;
    url: '/api/move_activity_in_staff_grid';
};

export type MoveActivityInStaffGridErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MoveActivityInStaffGridError = MoveActivityInStaffGridErrors[keyof MoveActivityInStaffGridErrors];

export type MoveActivityInStaffGridResponses = {
    /**
     * Successful Response
     */
    200: ReallocateActivityOkResponse | ReallocateActivityErrorResponse;
};

export type MoveActivityInStaffGridResponse = MoveActivityInStaffGridResponses[keyof MoveActivityInStaffGridResponses];

export type MoveActivityInLocationGridData = {
    body: MoveActivityInLocationGrid;
    path?: never;
    query?: never;
    url: '/api/move_activity_in_location_grid';
};

export type MoveActivityInLocationGridErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MoveActivityInLocationGridError = MoveActivityInLocationGridErrors[keyof MoveActivityInLocationGridErrors];

export type MoveActivityInLocationGridResponses = {
    /**
     * Successful Response
     */
    200: ReallocateActivityOkResponse | ReallocateActivityErrorResponse;
};

export type MoveActivityInLocationGridResponse = MoveActivityInLocationGridResponses[keyof MoveActivityInLocationGridResponses];

export type ReallocateStaffToActivityData = {
    body: ReallocateStaffToActivity;
    path?: never;
    query?: never;
    url: '/api/reallocate_staff_to_activity';
};

export type ReallocateStaffToActivityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReallocateStaffToActivityError = ReallocateStaffToActivityErrors[keyof ReallocateStaffToActivityErrors];

export type ReallocateStaffToActivityResponses = {
    /**
     * Successful Response
     */
    200: ReallocateActivityOkResponse | ReallocateActivityErrorResponse;
};

export type ReallocateStaffToActivityResponse = ReallocateStaffToActivityResponses[keyof ReallocateStaffToActivityResponses];

export type GetActivityTemplatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/activity_templates';
};

export type GetActivityTemplatesResponses = {
    /**
     * Successful Response
     */
    200: Array<ActivityTemplateListItem>;
};

export type GetActivityTemplatesResponse = GetActivityTemplatesResponses[keyof GetActivityTemplatesResponses];

export type GetActivityTemplateData = {
    body?: never;
    path: {
        activity_id: string;
    };
    query?: never;
    url: '/api/activity_template/{activity_id}';
};

export type GetActivityTemplateErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetActivityTemplateError = GetActivityTemplateErrors[keyof GetActivityTemplateErrors];

export type GetActivityTemplateResponses = {
    /**
     * Successful Response
     */
    200: ActivityTemplateResponseOutput;
};

export type GetActivityTemplateResponse = GetActivityTemplateResponses[keyof GetActivityTemplateResponses];

export type UpdateActivityTemplateData = {
    body: ActivityTemplateResponseInput;
    path?: never;
    query?: never;
    url: '/api/activity_template/{activity_id}';
};

export type UpdateActivityTemplateErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateActivityTemplateError = UpdateActivityTemplateErrors[keyof UpdateActivityTemplateErrors];

export type UpdateActivityTemplateResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TableConfigData = {
    body?: never;
    path: {
        location_or_staff: 'location' | 'staff';
    };
    query?: never;
    url: '/api/config/rota-grid/{location_or_staff}';
};

export type TableConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TableConfigError = TableConfigErrors[keyof TableConfigErrors];

export type TableConfigResponses = {
    /**
     * Successful Response
     */
    200: RotaConfig;
};

export type TableConfigResponse = TableConfigResponses[keyof TableConfigResponses];

export type ClientOptions = {
    baseUrl: 'http://127.0.0.1:8000' | (string & {});
};