// This file is auto-generated by @hey-api/openapi-ts

import { type Options, activitiesByDate, moveActivityInStaffGrid, moveActivityInLocationGrid, reallocateStaffToActivity, getActivityTemplates, getActivityTemplate, updateActivityTemplate, tableConfig } from '../sdk.gen';
import { queryOptions, type MutationOptions } from '@tanstack/solid-query';
import type { ActivitiesByDateData, MoveActivityInStaffGridData, MoveActivityInStaffGridError, MoveActivityInStaffGridResponse, MoveActivityInLocationGridData, MoveActivityInLocationGridError, MoveActivityInLocationGridResponse, ReallocateStaffToActivityData, ReallocateStaffToActivityError, ReallocateStaffToActivityResponse, GetActivityTemplatesData, GetActivityTemplateData, UpdateActivityTemplateData, UpdateActivityTemplateError, TableConfigData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const activitiesByDateQueryKey = (options?: Options<ActivitiesByDateData>) => [
    createQueryKey('activitiesByDate', options)
];

export const activitiesByDateOptions = (options?: Options<ActivitiesByDateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await activitiesByDate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activitiesByDateQueryKey(options)
    });
};

export const moveActivityInStaffGridQueryKey = (options: Options<MoveActivityInStaffGridData>) => [
    createQueryKey('moveActivityInStaffGrid', options)
];

export const moveActivityInStaffGridOptions = (options: Options<MoveActivityInStaffGridData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await moveActivityInStaffGrid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: moveActivityInStaffGridQueryKey(options)
    });
};

export const moveActivityInStaffGridMutation = (options?: Partial<Options<MoveActivityInStaffGridData>>) => {
    const mutationOptions: MutationOptions<MoveActivityInStaffGridResponse, MoveActivityInStaffGridError, Options<MoveActivityInStaffGridData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await moveActivityInStaffGrid({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const moveActivityInLocationGridQueryKey = (options: Options<MoveActivityInLocationGridData>) => [
    createQueryKey('moveActivityInLocationGrid', options)
];

export const moveActivityInLocationGridOptions = (options: Options<MoveActivityInLocationGridData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await moveActivityInLocationGrid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: moveActivityInLocationGridQueryKey(options)
    });
};

export const moveActivityInLocationGridMutation = (options?: Partial<Options<MoveActivityInLocationGridData>>) => {
    const mutationOptions: MutationOptions<MoveActivityInLocationGridResponse, MoveActivityInLocationGridError, Options<MoveActivityInLocationGridData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await moveActivityInLocationGrid({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const reallocateStaffToActivityQueryKey = (options: Options<ReallocateStaffToActivityData>) => [
    createQueryKey('reallocateStaffToActivity', options)
];

export const reallocateStaffToActivityOptions = (options: Options<ReallocateStaffToActivityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await reallocateStaffToActivity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: reallocateStaffToActivityQueryKey(options)
    });
};

export const reallocateStaffToActivityMutation = (options?: Partial<Options<ReallocateStaffToActivityData>>) => {
    const mutationOptions: MutationOptions<ReallocateStaffToActivityResponse, ReallocateStaffToActivityError, Options<ReallocateStaffToActivityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await reallocateStaffToActivity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getActivityTemplatesQueryKey = (options?: Options<GetActivityTemplatesData>) => [
    createQueryKey('getActivityTemplates', options)
];

export const getActivityTemplatesOptions = (options?: Options<GetActivityTemplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getActivityTemplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getActivityTemplatesQueryKey(options)
    });
};

export const getActivityTemplateQueryKey = (options: Options<GetActivityTemplateData>) => [
    createQueryKey('getActivityTemplate', options)
];

export const getActivityTemplateOptions = (options: Options<GetActivityTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getActivityTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getActivityTemplateQueryKey(options)
    });
};

export const updateActivityTemplateQueryKey = (options: Options<UpdateActivityTemplateData>) => [
    createQueryKey('updateActivityTemplate', options)
];

export const updateActivityTemplateOptions = (options: Options<UpdateActivityTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateActivityTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateActivityTemplateQueryKey(options)
    });
};

export const updateActivityTemplateMutation = (options?: Partial<Options<UpdateActivityTemplateData>>) => {
    const mutationOptions: MutationOptions<unknown, UpdateActivityTemplateError, Options<UpdateActivityTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateActivityTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tableConfigQueryKey = (options: Options<TableConfigData>) => [
    createQueryKey('tableConfig', options)
];

export const tableConfigOptions = (options: Options<TableConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tableConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tableConfigQueryKey(options)
    });
};